<?xml version="1.0" encoding="UTF-8" ?>

<!-- User.xml是一个映射文件 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
配置sql映射文件,文件名自定义，这里默认为User.xml,
Mybatis与hibernate相区别的是：hibernate是通过操作映射文件对象来操作数据库，与sql无太大关系;mybatis的映射文件是用来写sql语句的
注意：此文件放在源码包下（即在src包下的子包下）
 -->

<!-- 在mybatis中，映射文件中的namespace是用于绑定Dao接口的，即面向接口编程。 当你的namespace绑定接口后，你可以不用写接口实现类，mybatis会通过该绑定自动 
	帮 你找到对应要执行的SQL语句 -->
<!--mapper接口代理实现编写规则
    1.映射文件中namespace要等于接口的全路径名
    2.映射文件中sql语句id要等于接口的方法名称
    3.映射文件中传入参数类型要等于接口方法的传入参数类型
    4.映射文件中返回结果集类型等于接口方法的返回值类型
 -->
<!-- namespace命名空间，做sql隔离，防止命名重复 -->
<mapper namespace="com.zwq.imapper.IUser">

	<!--ID要与接口中的方法名相同 ,sql语句唯一标识, parameterType传入的参数类型(对应javaBean类型，写原始型会自动包装为包装类)
	, resultType 返回的类型这里也为User类的全路径，
	因为在全局配置文件Configuration.xml中为User类的全路径com.zwq.model.User设置了别名User，所
	以此处直接用User即可 
	 #{}:占位符号，起到占位作用，如果传入的是原始型，那么括号中的变量名称可以随意定义
	-->
	<!-- 通过用户Id查询用户信息 --><!--id=#{testid}括号中的名称任意-->
	<select id="getOneUserByID" parameterType="int" resultType="User">
		SELECT id,username,tel,address from user where id=#{id_random}
	</select>


    <!-- 通过用户名查询用户信息 -->
	 <select id="getOneUserByName" parameterType="String" resultType="User"> 
		SELECT id,username,tel,address from user where username=#{name}
		 </select>




	<!-- column表示的是从数据库中查询的属性, property表示的是实体对象的属性 -->
	
	<resultMap type="User" id="UserReasult"> 
	
	<!-- jdbcType 严格区分大小写，所以jdbcType="INTEGER"中INTEGER必须大写，不能为Integer，否则报错 -->
	<id property="id" jdbcType="INTEGER" column="id"></id> 
	<result property="username" jdbcType="VARCHAR" column="username"/> 
	<result property="tel" jdbcType="VARCHAR" column="tel"/>
	 <result property="address" jdbcType="VARCHAR" column="address"/>
	  </resultMap>


         <!-- 查询所有用户信息 -->
	<select id="getAllUser" resultMap="UserReasult"> 
	SELECT id,username,tel,address FROM user 
	</select>


<!--添加用户 -->
 <insert id="addUser" parameterType="User" >
insert into user(id,username,tel,address)
values(#{id},#{username},#{tel},#{address})
</insert>


<!-- 删除用户 -->
<delete id="deleteUserByID" parameterType="int">
        delete from user where id=#{id}
</delete>
    
    <!-- 修改用户 -->
    <update id="updateUserByID" parameterType="User">
        update user set username=#{username} where id=#{id}
    </update>

</mapper>